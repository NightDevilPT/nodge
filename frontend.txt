File Path: src\components\react-flow\DnDContext.tsx
Contents:
import { createContext, useContext, useState, ReactNode, useCallback } from 'react';
import { Node } from '@xyflow/react';
import { v4 as uuidv4 } from 'uuid';

type DnDContextType = {
  type: string | null;
  setType: (type: string | null) => void;
  nodes: Node[];
  edges: any[];
  addNode: (type: string, position: { x: number, y: number }) => void;
  removeNode: (id: string) => void;
  addEdge: (edge: any) => void;
  removeEdge: (id: string) => void;
};

interface DnDProviderProps {
  children: ReactNode;
}

const DnDContext = createContext<DnDContextType | undefined>(undefined);

export const DnDProvider: React.FC<DnDProviderProps> = ({ children }) => {
  const [type, setType] = useState<string | null>(null);
  const [nodes, setNodes] = useState<Node[]>([]);
  const [edges, setEdges] = useState<any[]>([]);

  const addNode = useCallback((type: string, position: { x: number, y: number }) => {
    const newNode = {
      id: uuidv4(),
      type,
      position,
      data: { label: `${type} Node` },
    };
    setNodes((prevNodes) => [...prevNodes, newNode]);
  }, []);

  const removeNode = useCallback((id: string) => {
    setNodes((prevNodes) => prevNodes.filter((node) => node.id !== id));
  }, []);

  const addEdge = useCallback((edge: any) => {
    setEdges((prevEdges) => [...prevEdges, edge]);
  }, []);

  const removeEdge = useCallback((id: string) => {
    setEdges((prevEdges) => prevEdges.filter((edge) => edge.id !== id));
  }, []);

  return (
    <DnDContext.Provider value={{ type, setType, nodes, edges, addNode, removeNode, addEdge, removeEdge }}>
      {children}
    </DnDContext.Provider>
  );
};

export const useDnD = (): DnDContextType => {
  const context = useContext(DnDContext);
  if (!context) {
    throw new Error('useDnD must be used within a DnDProvider');
  }
  return context;
};

export default DnDContext;

--------------------------------------------------

File Path: src\components\react-flow\edges\CustomEdge.tsx
Contents:
import React from 'react';
import { BaseEdge, EdgeLabelRenderer, getSmoothStepPath } from '@xyflow/react';
import { useDnD } from '../DnDContext';  // Importing the useDnD hook to interact with the context

// Define the expected props for the CustomEdge component
interface CustomEdgeProps {
  id: string;
  sourceX: number;
  sourceY: number;
  targetX: number;
  targetY: number;
}

const CustomEdge: React.FC<CustomEdgeProps> = ({
  id,
  sourceX,
  sourceY,
  targetX,
  targetY,
}) => {
  // Using the DnDContext's removeEdge function
  const { removeEdge } = useDnD();
  
  // Get the edge path and label position using the helper function
  const [edgePath, labelX, labelY] = getSmoothStepPath({
    sourceX,
    sourceY,
    targetX,
    targetY,
  });

  return (
    <>
      {/* Render the base edge */}
      <BaseEdge id={id} path={edgePath} />

      {/* Render the delete button at the calculated label position */}
      <EdgeLabelRenderer>
        <button
          style={{
            position: 'absolute',
            transform: `translate(-50%, -50%) translate(${labelX}px, ${labelY}px)`,
            pointerEvents: 'all',
          }}
          className="nodrag nopan"
          onClick={() => {
            // Use the removeEdge function from context to delete the edge
            removeEdge(id);
          }}
        >
          delete
        </button>
      </EdgeLabelRenderer>
    </>
  );
};

export default CustomEdge;

--------------------------------------------------

File Path: src\components\react-flow\nodes\DefaultNode.tsx
Contents:
import React from 'react';

const DefaultNode: React.FC = () => {
  return (
    <div className="px-5 py-2 rounded-md bg-gray-200 text-slate-700">
      Default Node
    </div>
  );
};

export default DefaultNode;

--------------------------------------------------

File Path: src\components\react-flow\nodes\index.ts
Contents:
import DefaultNode from "./DefaultNode";
import InputNode from "./InputNode";
import OutputNode from "./OutputNode";

export { InputNode, OutputNode, DefaultNode };

export type NodeType = 'input' | 'default' | 'output';

--------------------------------------------------

File Path: src\components\react-flow\nodes\InputNode.tsx
Contents:
import React from 'react';

const InputNode: React.FC = () => {
  return (
    <div className="px-5 py-2 rounded-md bg-blue-200 text-slate-700">
      Input Node
    </div>
  );
};

export default InputNode;

--------------------------------------------------

File Path: src\components\react-flow\nodes\OutputNode.tsx
Contents:
import React from 'react';

const OutputNode: React.FC = () => {
  return (
    <div className="px-5 py-2 rounded-md bg-green-200 text-slate-700">
      Output Node
    </div>
  );
};

export default OutputNode;

--------------------------------------------------

File Path: src\components\react-flow\ReactFlowSetup.tsx
Contents:
"use client"

import React, { useRef, useCallback } from "react";
import { ReactFlow, Controls, Background, ReactFlowProvider, useReactFlow } from "@xyflow/react";
import CustomEdge from "./edges/CustomEdge";
import { DnDProvider, useDnD } from "./DnDContext";
import DragAndDropComponent from "./ToolbarUI";

const DnDFlow: React.FC = () => {
  const reactFlowWrapper = useRef<HTMLDivElement | null>(null);
  const { nodes, edges, addNode, removeNode, addEdge, removeEdge, type } = useDnD();
  const { screenToFlowPosition } = useReactFlow();

  const onConnect = useCallback((params) => {
    const edge = { ...params, type: "custom" };
    addEdge(edge);
  }, [addEdge]);

  const onDrop = useCallback(
    (event: React.DragEvent) => {
      event.preventDefault();

      if (!type) return;

      const position = screenToFlowPosition({
        x: event.clientX,
        y: event.clientY,
      });

      addNode(type, position);
    },
    [screenToFlowPosition, type, addNode]
  );

  const onDragOver = useCallback((event: React.DragEvent) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = "move";
  }, []);

  return (
    <div
      className="w-full h-full grid grid-rows-[90px,_1fr] rounded-md border-[1px] border-divider"
      ref={reactFlowWrapper}
    >
      <div className="w-full h-[90px] grid grid-rows-[35px,_1fr] border-b-[1px] border-b-divider px-2">
        <div className="w-full flex justify-start items-center gap-5">
          <span className="text-sm font-[500]">Project 1</span>
        </div>
        <DragAndDropComponent />
      </div>
      <div className="w-full flex-1 overflow-auto">
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onConnect={onConnect}
          onDrop={onDrop}
          onDragOver={onDragOver}
          defaultMarkerColor={"red"}
          snapGrid={[30, 30]}
          edgeTypes={{
            custom: (props) => <CustomEdge {...props} removeEdge={removeEdge} />,
          }}
        >
          <Controls />
          <Background />
        </ReactFlow>
      </div>
    </div>
  );
};

const ReactFlowSetup: React.FC = () => (
  <ReactFlowProvider>
    <DnDProvider>
      <DnDFlow />
    </DnDProvider>
  </ReactFlowProvider>
);

export default ReactFlowSetup;

--------------------------------------------------

File Path: src\components\react-flow\ToolbarUI.tsx
Contents:
import React, { DragEvent } from 'react';
import { useDnD } from './DnDContext';
import { NodeType, InputNode, DefaultNode, OutputNode } from './nodes';
import { FaPlug, FaRegPlayCircle, FaArrowCircleRight } from 'react-icons/fa';

const DragAndDropComponent: React.FC = () => {
  const { setType } = useDnD();

  const onDragStart = (event: DragEvent<HTMLDivElement>, nodeType: NodeType): void => {
    setType(nodeType);
    event.dataTransfer.effectAllowed = 'move';
  };

  const nodeTypes = [
    { type: 'input', label: 'Input Node', icon: <FaPlug />, component: <InputNode /> },
    { type: 'default', label: 'Default Node', icon: <FaRegPlayCircle />, component: <DefaultNode /> },
    { type: 'output', label: 'Output Node', icon: <FaArrowCircleRight />, component: <OutputNode /> },
  ];

  return (
    <div className="w-full h-full flex justify-start items-center gap-4">
      {nodeTypes.map((node) => (
        <div
          key={node.type}
          className="px-3 py-1 flex items-center gap-2 rounded-md bg-white border-2 border-slate-200 text-slate-700 cursor-pointer"
          onDragStart={(event) => onDragStart(event, node.type as NodeType)}
          draggable
        >
          <span className="text-sm">{node.icon}</span>
          <span className="text-sm">{node.label}</span>
        </div>
      ))}
    </div>
  );
};

export default DragAndDropComponent;

--------------------------------------------------

