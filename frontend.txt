File Path: C:\Users\Pawan\Desktop\FullStackProject\nodge\src\app\api\user\forget\route.ts
Contents:
import { NextRequest, NextResponse } from "next/server";

import prisma from "@/lib/prisma-client";
import { config } from "@/components/config";
import { emailProviderFactory } from "@/services/email-provider.service";
import { getOtpEmailTemplate } from "@/templates/otp-mail.template";
import { generateOtp } from "@/lib/generate-otp";


export async function POST(request: NextRequest) {
  try {
    const { email } = await request.json();

    // Validate email field
    if (!email) {
      return NextResponse.json(
        { message: "Email is required." },
        { status: 400 }
      );
    }

    // Check if the user exists
    const user = await prisma.user.findUnique({ where: { email } });
    if (!user) {
      return NextResponse.json(
        { message: "User with this email does not exist." },
        { status: 404 }
      );
    }

    // Generate a new OTP and expiration time
    const otp = generateOtp();
    const otpExpireAt = new Date(Date.now() + 10 * 60 * 1000); // OTP valid for 10 minutes

    // Update the OTP and expiry time in the database
    await prisma.user.update({
      where: { email },
      data: {
        otp,
        otpExpireAt,
      },
    });

    // Configure email transporter and send the OTP email
    const transporter = emailProviderFactory("gmail");
    const emailOptions = {
      from: config.emailId,
      to: email,
      subject: "Password Reset OTP",
      html: getOtpEmailTemplate(user.username, otp, new Date().getFullYear().toString()),
    };

    await transporter.sendMail(emailOptions);

    return NextResponse.json(
      { message: "Password reset OTP has been sent to your email." },
      { status: 200 }
    );

  } catch (error) {
    console.error("Error in forgot password:", error);
    return NextResponse.json(
      { message: "An internal server error occurred. Please try again later." },
      { status: 500 }
    );
  }
}

--------------------------------------------------

File Path: C:\Users\Pawan\Desktop\FullStackProject\nodge\src\app\api\user\register\route.ts
Contents:
import bcrypt from "bcryptjs";
import { NextRequest, NextResponse } from "next/server";

import prisma from "@/lib/prisma-client";
import { config } from "@/components/config";
import { generateOtp } from "@/lib/generate-otp";
import { CreateUserRequest } from "@/interface/user.interface";
import { getOtpEmailTemplate } from "@/templates/otp-mail.template";
import { emailProviderFactory } from "@/services/email-provider.service";

export async function POST(request: NextRequest) {
	try {
		// Extract request body
		const { username, email, password, provider } =
			(await request.json()) as CreateUserRequest;

		// Validate required fields
		if (!username || !email || !password || !provider) {
			return NextResponse.json(
				{ message: "All fields are required." },
				{ status: 400 }
			);
		}

		// Check if user already exists
		const existingUser = await prisma.user.findUnique({ where: { email } });
		if (existingUser) {
			return NextResponse.json(
				{ message: "An account with this email already exists." },
				{ status: 409 }
			);
		}

		// Hash the password securely
		const hashedPassword = await bcrypt.hash(password, 10);
		const otp = generateOtp(); // Generate OTP for email verification
		const currentYear = new Date().getFullYear().toString();

		// Create the new user record in the database
		await prisma.user.create({
			data: {
				username,
				email,
				password: hashedPassword,
				provider,
				otp,
				otpExpireAt: new Date(Date.now() + 10 * 60 * 1000), // OTP expires in 10 minutes
			},
		});

		// Configure email transporter for sending verification email
		const transporter = emailProviderFactory("gmail");
		const emailOptions = {
			from: config.emailId,
			to: email,
			subject: "Email Verification",
			html: getOtpEmailTemplate(username, otp, currentYear),
		};

		// Send verification email
		await transporter.sendMail(emailOptions);

		return NextResponse.json(
			{
				message:
					"User created successfully. A verification email has been sent.",
			},
			{ status: 201 }
		);
	} catch (error) {
		console.error("Error in user registration:", error);
		return NextResponse.json(
			{
				message:
					"An internal server error occurred. Please try again later.",
			},
			{ status: 500 }
		);
	}
}

--------------------------------------------------

File Path: C:\Users\Pawan\Desktop\FullStackProject\nodge\src\app\api\user\update-password\route.ts
Contents:
import { NextRequest, NextResponse } from "next/server";
import prisma from "@/lib/prisma-client";
import bcrypt from "bcryptjs";

export async function POST(request: NextRequest) {
	try {
		// Extract request body
		const { email, otp, newPassword } = await request.json();

		// Validate required fields
		if (!email || !otp || !newPassword) {
			return NextResponse.json(
				{ message: "Email, OTP, and new password are required." },
				{ status: 400 }
			);
		}

		// Find the user by email
		const user = await prisma.user.findFirst({
			where: {
				email,
				otp,
			},
		});

		if (!user) {
			return NextResponse.json(
				{ message: "Invalid OTP or user not found." },
				{ status: 404 }
			);
		}

		// Check if OTP has expired
		if (!user.otpExpireAt || user.otpExpireAt < new Date()) {
			return NextResponse.json(
				{ message: "OTP has expired. Please request a new OTP." },
				{ status: 410 }
			);
		}

		// Hash the new password
		const hashedPassword = await bcrypt.hash(newPassword, 10);

		// Update the password and clear OTP fields
		await prisma.user.update({
			where: { email },
			data: {
				password: hashedPassword,
				otp: null, // Clear OTP after successful update
				otpExpireAt: null,
			},
		});

		return NextResponse.json(
			{ message: "Password updated successfully." },
			{ status: 200 }
		);
	} catch (error) {
		console.error("Error in updating password:", error);
		return NextResponse.json(
			{
				message:
					"An internal server error occurred. Please try again later.",
			},
			{ status: 500 }
		);
	}
}

--------------------------------------------------

File Path: C:\Users\Pawan\Desktop\FullStackProject\nodge\src\app\api\user\verify\resend-verification\route.ts
Contents:
import { NextRequest, NextResponse } from "next/server";
import prisma from "@/lib/prisma-client";
import { emailProviderFactory } from "@/services/email-provider.service";
import { getOtpEmailTemplate } from "@/templates/otp-mail.template";
import { config } from "@/components/config";
import { generateOtp } from "@/lib/generate-otp";

export async function POST(request: NextRequest) {
	try {
		// Extract request body
		const { email } = await request.json();

		// Validate email field
		if (!email) {
			return NextResponse.json(
				{ message: "Email is required." },
				{ status: 400 }
			);
		}

		// Check if the user exists
		const user = await prisma.user.findUnique({ where: { email } });
		if (!user) {
			return NextResponse.json(
				{ message: "User with this email does not exist." },
				{ status: 404 }
			);
		}

		// Check if the user is already verified
		if (user.isVerified) {
			return NextResponse.json(
				{ message: "Email is already verified." },
				{ status: 400 }
			);
		}

		// Generate a new OTP and expiration time
		const otp = generateOtp();
		const otpExpireAt = new Date(Date.now() + 10 * 60 * 1000); // OTP valid for 10 minutes

		// Update the OTP and expiry time in the database
		await prisma.user.update({
			where: { email },
			data: {
				otp,
				otpExpireAt,
			},
		});

		// Configure email transporter and send the OTP email
		const transporter = emailProviderFactory("gmail");
		const emailOptions = {
			from: config.emailId,
			to: email,
			subject: "Resend Email Verification OTP",
			html: getOtpEmailTemplate(
				user.username,
				otp,
				new Date().getFullYear().toString()
			),
		};

		await transporter.sendMail(emailOptions);

		return NextResponse.json(
			{
				message:
					"Verification email has been resent. Please check your inbox.",
			},
			{ status: 200 }
		);
	} catch (error) {
		console.error("Error in resend verification:", error);
		return NextResponse.json(
			{
				message:
					"An internal server error occurred. Please try again later.",
			},
			{ status: 500 }
		);
	}
}

--------------------------------------------------

File Path: C:\Users\Pawan\Desktop\FullStackProject\nodge\src\app\api\user\verify\route.ts
Contents:
import { NextRequest, NextResponse } from "next/server";
import prisma from "@/lib/prisma-client";

export async function POST(request: NextRequest) {
  try {
    // Extract request body
    const { email, otp } = await request.json();

    // Validate required fields
    if (!email || !otp) {
      return NextResponse.json(
        { message: "Email and OTP are required." },
        { status: 400 }
      );
    }

    // Find the user by email and otp
    const user = await prisma.user.findFirst({
      where: {
        email: email,
        otp: otp,
      },
    });

    if (!user) {
      return NextResponse.json(
        { message: "Invalid OTP or user not found." },
        { status: 404 }
      );
    }

    // Check if OTP has expired
    if (!user.otpExpireAt || user.otpExpireAt < new Date()) {
      return NextResponse.json(
        { message: "OTP has expired. Please request a new verification email." },
        { status: 410 }
      );
    }

    // Update the user's verification status
    await prisma.user.update({
      where: { email: email },
      data: {
        isVerified: true,
        otp: null, // Clear OTP after successful verification
        otpExpireAt: null,
      },
    });

    return NextResponse.json(
      { message: "Email verified successfully." },
      { status: 200 }
    );
  } catch (error) {
    console.error("Error during verification:", error);
    return NextResponse.json(
      { message: "An internal server error occurred. Please try again later." },
      { status: 500 }
    );
  }
}

--------------------------------------------------

