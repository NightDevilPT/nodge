File Path: src\components\react-flow\DnDContext.tsx
Contents:
import { createContext, useContext, useState, ReactNode } from 'react';

type DnDContextType = [string | null, (type: string | null) => void];
interface DnDProviderProps {
  children: ReactNode;
}
const DnDContext = createContext<DnDContextType>([null, () => {}]);

export const DnDProvider: React.FC<DnDProviderProps> = ({ children }) => {
  const [type, setType] = useState<string | null>(null);

  return (
    <DnDContext.Provider value={[type, setType]}>
      {children}
    </DnDContext.Provider>
  );
};

export default DnDContext;

export const useDnD = (): DnDContextType => {
  return useContext(DnDContext);
};

--------------------------------------------------

File Path: src\components\react-flow\edges\CustomEdge.tsx
Contents:
import React from 'react';
import {
  BaseEdge,
  EdgeLabelRenderer,
  getStraightPath,
  useReactFlow,
  EdgeProps,
  getSmoothStepPath,
} from '@xyflow/react';
import { FaPlus } from 'react-icons/fa';

// Define the expected props for the CustomEdge component
interface CustomEdgeProps {
  id: string;
  sourceX: number;
  sourceY: number;
  targetX: number;
  targetY: number;
}

const CustomEdge: React.FC<CustomEdgeProps> = ({
  id,
  sourceX,
  sourceY,
  targetX,
  targetY,
}) => {
  const { setEdges } = useReactFlow();
  
  // Get the edge path and label position using the helper function
  const [edgePath, labelX, labelY] = getSmoothStepPath({
    sourceX,
    sourceY,
    targetX,
    targetY,
  });

  return (
    <>
      {/* Render the base edge */}
      <BaseEdge id={id} path={edgePath} />

      {/* Render the delete button at the calculated label position */}
      <EdgeLabelRenderer>
        <button
          style={{
            position: 'absolute',
            transform: `translate(-50%, -50%) translate(${labelX}px, ${labelY}px)`,
            pointerEvents: 'all',
          }}
          className="nodrag nopan"
          onClick={() => {
            // Remove the edge when the delete button is clicked
            setEdges((edges) => edges.filter((e) => e.id !== id));
          }}
        >
          delete
        </button>
      </EdgeLabelRenderer>
    </>
  );
};

export default CustomEdge;

--------------------------------------------------

File Path: src\components\react-flow\nodes\DefaultNode.tsx
Contents:
import React from 'react';

const DefaultNode: React.FC = () => {
  return (
    <div className="px-5 py-2 rounded-md bg-gray-200 text-slate-700">
      Default Node
    </div>
  );
};

export default DefaultNode;

--------------------------------------------------

File Path: src\components\react-flow\nodes\index.ts
Contents:
import DefaultNode from "./DefaultNode";
import InputNode from "./InputNode";
import OutputNode from "./OutputNode";

export { InputNode, OutputNode, DefaultNode };

export type NodeType = 'input' | 'default' | 'output';

--------------------------------------------------

File Path: src\components\react-flow\nodes\InputNode.tsx
Contents:
import React from 'react';

const InputNode: React.FC = () => {
  return (
    <div className="px-5 py-2 rounded-md bg-blue-200 text-slate-700">
      Input Node
    </div>
  );
};

export default InputNode;

--------------------------------------------------

File Path: src\components\react-flow\nodes\OutputNode.tsx
Contents:
import React from 'react';

const OutputNode: React.FC = () => {
  return (
    <div className="px-5 py-2 rounded-md bg-green-200 text-slate-700">
      Output Node
    </div>
  );
};

export default OutputNode;

--------------------------------------------------

File Path: src\components\react-flow\ReactFlowSetup.tsx
Contents:
"use client";

import React, { useRef, useCallback } from "react";
import {
	ReactFlow,
	addEdge,
	type Node,
	type OnConnect,
	useNodesState,
	useEdgesState,
	Controls,
	useReactFlow,
	Background,
	ReactFlowProvider,
} from "@xyflow/react";

import "@xyflow/react/dist/style.css";
import DragAndDropComponent from "./ToolbarUI";
import { DnDProvider, useDnD } from "./DnDContext";
import { v4 as uuidv4 } from "uuid";
import CustomEdge from "./edges/CustomEdge";

// Define NodeData type to satisfy the Record<string, unknown> constraint
interface NodeData extends Record<string, unknown> {
	label: string;
}

// Define the custom Node type
type CustomNode = Node<NodeData>; // Define CustomNode as a Node with NodeData

// Initial nodes with NodeData type
const initialNodes: CustomNode[] = [];

const getId = () => uuidv4();

const DnDFlow: React.FC = () => {
	const reactFlowWrapper = useRef<HTMLDivElement | null>(null);

	// Define the types for nodes and edges
	const [nodes, setNodes, onNodesChange] =
		useNodesState<CustomNode>(initialNodes);
	const [edges, setEdges, onEdgesChange] = useEdgesState([]);

	const { screenToFlowPosition } = useReactFlow();
	const [type] = useDnD();

	// Handle new connections between nodes
	const onConnect: OnConnect = useCallback((params) => {
		// Set edge type (solid or dashed) on connection
		const edge = { ...params, type: "custom" }; // Use 'custom' edge type
		setEdges((eds) => addEdge(edge, eds));
	}, []);

	const removeEdge = (edgeId: string) => {
		setEdges((eds) => eds.filter((edge) => edge.id !== edgeId)); // Filter out the edge with the given ID
	};

	const onDragOver = useCallback((event: React.DragEvent) => {
		event.preventDefault();
		event.dataTransfer.dropEffect = "move";
	}, []);

	const onDrop = useCallback(
		(event: React.DragEvent) => {
			event.preventDefault();

			if (!type) {
				return;
			}

			const position = screenToFlowPosition({
				x: event.clientX,
				y: event.clientY,
			});

			const newNode: CustomNode = {
				id: getId(),
				type,
				position,
				data: { label: `${type} Node` },
			};

			setNodes((nds) => nds.concat(newNode));
		},
		[screenToFlowPosition, type, setNodes]
	);

	return (
		<div
			className="w-full h-full grid grid-rows-[90px,_1fr] rounded-md border-[1px] border-divider"
			ref={reactFlowWrapper}
		>
			<div className="w-full h-[90px] grid grid-rows-[35px,_1fr] border-b-[1px] border-b-divider px-2">
        <div className="w-full flex justify-start items-center gap-5">
          <span className="text-sm font-[500]">Project 1</span>
        </div>
        <DragAndDropComponent />
			</div>
			<div className="w-full flex-1 overflow-auto">
				<ReactFlow
					nodes={nodes}
					edges={edges}
					onNodesChange={onNodesChange}
					onEdgesChange={onEdgesChange}
					onConnect={onConnect}
					onDrop={onDrop}
					onDragOver={onDragOver}
					defaultMarkerColor={"red"}
					snapGrid={[30, 30]}
					edgeTypes={{
						custom: (props) => (
							<CustomEdge {...props} removeEdge={removeEdge} />
						),
					}}
				>
					<Controls />
					<Background />
				</ReactFlow>
			</div>
		</div>
	);
};

const ReactFlowSetup: React.FC = () => (
	<ReactFlowProvider>
		<DnDProvider>
			<DnDFlow />
		</DnDProvider>
	</ReactFlowProvider>
);

export default ReactFlowSetup;

--------------------------------------------------

File Path: src\components\react-flow\ToolbarUI.tsx
Contents:
import React, { DragEvent } from 'react';
import { useDnD } from './DnDContext';
import { NodeType, InputNode, DefaultNode, OutputNode } from './nodes';
import { FaPlug, FaRegPlayCircle, FaArrowCircleRight } from 'react-icons/fa'; // Import icons from react-icons

const DragAndDropComponent: React.FC = () => {
  const [_, setType] = useDnD();

  // onDragStart function with typed parameters
  const onDragStart = (event: DragEvent<HTMLDivElement>, nodeType: NodeType): void => {
    setType(nodeType);
    event.dataTransfer.effectAllowed = 'move';
  };

  const nodeTypes = [
    { type: 'input', label: 'Input Node', icon: <FaPlug />, component: <InputNode /> },
    { type: 'default', label: 'Default Node', icon: <FaRegPlayCircle />, component: <DefaultNode /> },
    { type: 'output', label: 'Output Node', icon: <FaArrowCircleRight />, component: <OutputNode /> },
  ];

  return (
    <div className="w-full h-full flex justify-start items-center gap-4">
      {nodeTypes.map((node) => (
        <div
          key={node.type}
          className="px-3 py-1 flex items-center gap-2 rounded-md bg-white border-2 border-slate-200 text-slate-700 cursor-pointer"
          onDragStart={(event) => onDragStart(event, node.type as NodeType)}
          draggable
        >
          <span className="text-sm">{node.icon}</span> {/* Display the icon */}
          <span className="text-sm">{node.label}</span> {/* Display the label */}
        </div>
      ))}
    </div>
  );
};

export default DragAndDropComponent;

--------------------------------------------------

